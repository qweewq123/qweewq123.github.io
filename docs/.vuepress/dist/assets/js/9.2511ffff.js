(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{169:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"web安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web安全","aria-hidden":"true"}},[t._v("#")]),t._v(" web安全")]),a("p",[t._v("在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。本文将会简单介绍 XSS 和 CSRF 的攻防问题。")]),a("h2",{attrs:{id:"xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS")]),a("p",[t._v("XSS，即 Cross Site Script，中译是跨站脚本攻击；其原本缩写是 CSS，但为了和层叠样式表(Cascading Style Sheet)有所区分，因而在安全领域叫做 XSS。")]),a("p",[t._v("XSS 攻击是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式。")]),a("p",[t._v("攻击者对客户端网页注入的恶意脚本一般包括 JavaScript，有时也会包含 HTML 和 Flash。有很多种方式进行 XSS 攻击，但它们的共同点为：将一些隐私数据像 cookie、session 发送给攻击者，将受害者重定向到一个由攻击者控制的网站，在受害者的机器上进行一些恶意操作。")]),a("p",[t._v("XSS攻击可以分为3类：反射型（非持久型）、存储型（持久型）、基于DOM。")]),a("h4",{attrs:{id:"反射型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射型","aria-hidden":"true"}},[t._v("#")]),t._v(" 反射型")]),a("p",[t._v("反射型 XSS 只是简单地把用户输入的数据 “反射” 给浏览器，这种攻击方式往往需要攻击者诱使用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。")]),a("h4",{attrs:{id:"存储型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型","aria-hidden":"true"}},[t._v("#")]),t._v(" 存储型")]),a("p",[t._v('存储型 XSS 会把用户输入的数据 "存储" 在服务器端，当浏览器请求数据时，脚本从服务器上传回并执行。这种 XSS 攻击具有很强的稳定性。')]),a("p",[t._v("比较常见的一个场景是攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。")]),a("h4",{attrs:{id:"dom型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom型","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM型")]),a("p",[t._v("基于 DOM 的 XSS 攻击是指通过恶意脚本修改页面的 DOM 结构，是纯粹发生在客户端的攻击。")]),a("h2",{attrs:{id:"xss-攻击的防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击的防范","aria-hidden":"true"}},[t._v("#")]),t._v(" XSS 攻击的防范")]),a("p",[t._v("现在主流的浏览器内置了防范 XSS 的措施，例如 CSP。但对于开发者来说，也应该寻找可靠的解决方案来防止 XSS 攻击。")]),a("h4",{attrs:{id:"httponly-防止劫取-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httponly-防止劫取-cookie","aria-hidden":"true"}},[t._v("#")]),t._v(" HttpOnly 防止劫取 Cookie")]),a("p",[t._v("HttpOnly 最早由微软提出，至今已经成为一个标准。浏览器将禁止页面的Javascript 访问带有 HttpOnly 属性的Cookie。")]),a("p",[t._v("上文有说到，攻击者可以通过注入恶意脚本获取用户的 Cookie 信息。通常 Cookie 中都包含了用户的登录凭证信息，攻击者在获取到 Cookie 之后，则可以发起 Cookie 劫持攻击。所以，严格来说，HttpOnly 并非阻止 XSS 攻击，而是能阻止 XSS 攻击后的 Cookie 劫持攻击。")]),a("h4",{attrs:{id:"输入检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入检查","aria-hidden":"true"}},[t._v("#")]),t._v(" 输入检查")]),a("p",[a("strong",[t._v("不要相信用户的任何输入。")]),t._v(" 对于用户的任何输入要进行检查、过滤和转义。建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。")]),a("p",[t._v("在 XSS 防御中，输入检查一般是检查用户输入的数据中是否包含 <，> 等特殊字符，如果存在，则对特殊字符进行过滤或编码，这种方式也称为 XSS Filter。")]),a("p",[t._v("而在一些前端框架中，都会有一份 decodingMap， 用于对用户输入所包含的特殊字符或标签进行编码或过滤，如 <，>，script，防止 XSS 攻击：")]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// vuejs 中的 decodingMap")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在 vuejs 中，如果输入带 script 标签的内容，会直接过滤掉")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decodingMap "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&lt;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&gt;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&quot;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&amp;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&#10;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"输出检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出检查","aria-hidden":"true"}},[t._v("#")]),t._v(" 输出检查")]),a("p",[t._v("用户的输入会存在问题，服务端的输出也会存在问题。一般来说，除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。例如利用 sanitize-html 对输出内容进行有规则的过滤之后再输出到页面中。")]),a("h2",{attrs:{id:"csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf","aria-hidden":"true"}},[t._v("#")]),t._v(" CSRF")]),a("p",[t._v("CSRF，即 Cross Site Request Forgery，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。")]),a("p",[t._v("通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。")]),a("p",[t._v("在举例子之前，先说说浏览器的 Cookie 策略。")]),a("h4",{attrs:{id:"浏览器的-cookie-策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的-cookie-策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的 Cookie 策略")]),a("p",[t._v("Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。Cookie 主要用于以下三个方面：")]),a("ul",[a("li",[t._v("会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）")]),a("li",[t._v("个性化设置（如用户自定义设置、主题等）")]),a("li",[t._v("浏览器行为跟踪（跟踪分析用户行为）")])]),a("p",[t._v("而浏览器所持有的 Cookie 分为两种：")]),a("ul",[a("li",[t._v("Session Cookie(会话期 Cookie)：会话期 Cookie 是最简单的Cookie，它不需要指定过期时间（Expires）或者有效期（Max-Age），它仅在会话期内有效，浏览器关闭之后它会被自动删除。")]),a("li",[t._v("Permanent Cookie(持久性 Cookie)：与会话期 Cookie 不同的是，持久性 Cookie 可以指定一个特定的过期时间（Expires）或有效期（Max-Age）。")])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Set-Cookie'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'mycookie=222'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'test=3333; expires=Sat, 21 Jul 2018 00:00:00 GMT;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上述代码创建了两个 Cookie：mycookie 和 test，前者属于会话期 Cookie，后者则属于持久性 Cookie。当我们去查看 Cookie 相关的属性时，不同的浏览器对会话期 Cookie 的 Expires 属性值会不一样。\n此外，每个 Cookie 都会有与之关联的域，这个域的范围一般通过 donmain 属性指定。如果 Cookie 的域和页面的域相同，那么我们称这个 Cookie 为第一方 Cookie（first-party cookie），如果 Cookie 的域和页面的域不同，则称之为第三方 Cookie（third-party cookie）。一个页面包含图片或存放在其他域上的资源（如图片）时，第一方的 Cookie 也只会发送给设置它们的服务器。")]),a("h4",{attrs:{id:"通过-cookie-进行-csrf-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-cookie-进行-csrf-攻击","aria-hidden":"true"}},[t._v("#")]),t._v(" 通过 Cookie 进行 CSRF 攻击")]),a("pre",[a("code",[t._v("1. 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；\n\n2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；\n\n3. 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；\n\n4. 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；\n\n\n5. 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。\n")])]),a("h2",{attrs:{id:"csrf-攻击的防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击的防范","aria-hidden":"true"}},[t._v("#")]),t._v(" CSRF 攻击的防范")]),a("p",[t._v("当前，对 CSRF 攻击的防范措施主要有如下几种方式。")]),a("h4",{attrs:{id:"验证码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证码","aria-hidden":"true"}},[t._v("#")]),t._v(" 验证码")]),a("p",[t._v("验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。")]),a("p",[t._v("从上述示例中可以看出，CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因为通常情况下，验证码能够很好地遏制 CSRF 攻击。")]),a("p",[t._v("但验证码并不是万能的，因为出于用户考虑，不能给网站所有的操作都加上验证码。因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。")]),a("h4",{attrs:{id:"referer-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#referer-check","aria-hidden":"true"}},[t._v("#")]),t._v(" Referer Check")]),a("p",[t._v('根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。通过 Referer Check，可以检查请求是否来自合法的"源"。')]),a("p",[t._v("比如，如果用户要删除自己的帖子，那么先要登录 www.c.com，然后找到对应的页面，发起删除帖子的请求。此时，Referer 的值是 http://www.c.com；当请求是从 www.a.com 发起时，Referer 的值是 http://www.a.com 了。因此，要防御 CSRF 攻击，只需要对于每一个删帖请求验证其 Referer 值，如果是以 www.c.com 开头的域名，则说明该请求是来自网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是 CSRF 攻击，可以拒绝该请求。\n然而，这种方法并非万无一失。Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行 CSRF 攻击。")]),a("p",[t._v("即便是使用最新的浏览器，黑客无法篡改 Referer 值，这种方法仍然有问题。因为 Referer 值会记录下用户的访问来源，有些用户认为这样会侵犯到他们自己的隐私权，特别是有些组织担心 Referer 值会把组织内网中的某些信息泄露到外网中。因此，用户自己可以设置浏览器使其在发送请求时不再提供 Referer。当他们正常访问银行网站时，网站会因为请求没有 Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。")]),a("p",[t._v('Referer Check 不仅能防范 CSRF 攻击，另一个应用场景是 "防止图片盗链"。')]),a("h4",{attrs:{id:"添加-token-验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加-token-验证","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加 token 验证")]),a("p",[t._v("CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。")]),a("p",[t._v("这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 "),a("code",[t._v("http://url?csrftoken=tokenvalue。")]),t._v(" 而对于 POST 请求来说，要在 form 的最后加上 "),a("input",{attrs:{type:"”hidden”",name:"”csrftoken”",value:"”tokenvalue”/"}}),t._v("，这样就把 token 以参数的形式加入请求了。但是，在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 html 代码，这种方法就没有作用，还需要程序员在编码时手动添加 token。")]),a("p",[t._v("该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。")]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),a("p",[t._v("最后，总结一下 XSS 攻击和 CSRF 攻击的常见防御措施：")]),a("ol",[a("li",[t._v("防御 XSS 攻击")])]),a("ul",[a("li",[t._v("HttpOnly 防止劫取 Cookie")]),a("li",[t._v("用户的输入检查")]),a("li",[t._v("服务端的输出检查")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("防御 CSRF 攻击")])]),a("ul",[a("li",[t._v("验证码")]),a("li",[t._v("Referer Check")]),a("li",[t._v("Token 验证")])])])}],!1,null,null,null);e.default=r.exports}}]);